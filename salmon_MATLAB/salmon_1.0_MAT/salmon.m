function [Pscore,A] = salmon(lfc,slope,pgn,grplist,kfold,par,numCores)

%--------------------------------------------------------------------------
%DESCRIPTION:
%           Solve the network inference problem given log2fc expressiond data 
%           and a protein gene regulation network using Ridge regression
%
%INPUT ARGUMENTS:
%lfc             log2FC expression data as matrix or dataframe, each row 
%                represents a gene and each column represents a sample.
%slope           slope matrix calculated by log2FC values at different time 
%                points within the same group of experiments
%pgn             a sparse matrix representing protein-gene regulation
%                network generated by generatePGN.m
%grplist         group index of each sample. This is used to calculate z-score 
%                for a group of samples. Give samples the same group index 
%                if you want to calculate a single score for them. Group 
%                indices should be a consecutive sequence starting from 1.
%                For example, if there are 3 groups, group indices should be 
%                1,2,3. The corresponding samples can have a random order,
%                i.e. the group index for 7 samples are 3,2,3,1,2,1,3. 
%kfold           number of folds used in cross validation.
%par             true or false indicating whether to do parallel computing. 
%                If empty, by default it is set to false.
%numCores        number of cores to use for parallel computing. If empty, 
%                by default it is set to 4. This only matters if you set 
%                parallel to TRUE.
%
%OUTPUT ARGUMENTS:
%Pscore            a n*m perturbation matrix. n is the number of genes in the 
%                gene list/gene expression data; m is the number of groups
%                in grplist, column 1 corresponds to group 1, column 2 
%                corresponds to group 2 etc. 
%A               a k*n A matrix. n is the number of genes in the gene list/
%                gene expression data; k is the number of genes that have 
%                interactions based on the generated network.
%--------------------------------------------------------------------------

if nargin<5 || isempty(kfold)
    kfold = 10;
end

if nargin < 6 || isempty(par)
    par = false;
end

if nargin < 7 || isempty(numCores)
    numCores = 4;
end

lfc = normr(lfc)*sqrt(size(lfc,2)-1);
[n,m] = size(lfc);

slope = normr(slope)*sqrt(size(slope,2)-1);
ms = size(slope,2);

dg = find(sum(pgn,1));


%% DeltaNeTS-ridge regression

A=zeros(length(dg),n);

opts = [];
opts.intr = 0;
opts.alpha = 0.0;

if par
    poolobj = gcp('nocreate');
    delete(poolobj);
    parpool('local',numCores)
    parfor j=1:length(dg)
       fprintf('SALMON is running...(%4d/%d)\n',j,length(dg));
       ppar = find(pgn(:,dg(j))); 

       if ~isempty(slope)
           X = [lfc(ppar,:),slope(ppar,:)];
           y = [lfc(dg(j),:),slope(dg(j),:)];
       else
           X = lfc(ppar,:);
           y = lfc(dg(j),:);
       end

       Xin = [X',[eye(m);zeros(ms,m)]];
       result = cvglmnet(Xin,y',[],opts,[],kfold);
       lambda_opt = find(result.lambda==result.lambda_min);
       beta = result.glmnet_fit.beta(:,lambda_opt);
       Aj = zeros(n,1);
       Aj(ppar) = beta(1:end-m)';
       A(j,:) = Aj';
    end
    poolobj = gcp('nocreate');
    delete(poolobj)
else
    for j=1:length(dg)
       fprintf('SALMON is running...(%4d/%d)\n',j,length(dg));
       ppar = find(pgn(:,dg(j))); 

       if ~isempty(slope)
           X = [lfc(ppar,:),slope(ppar,:)];
           y = [lfc(dg(j),:),slope(dg(j),:)];
       else
           X = lfc(ppar,:);
           y = lfc(dg(j),:);
       end

       Xin = [X',[eye(m);zeros(ms,m)]];
       result = cvglmnet(Xin,y',[],opts,[],kfold);
       lambda_opt = find(result.lambda==result.lambda_min);
       beta = result.glmnet_fit.beta(:,lambda_opt);
       Aj = zeros(n,1);
       Aj(ppar) = beta(1:end-m)';
       A(j,:) = Aj';
    end
end

fprintf('A has been learned!\n')

%% Z-test
if ~isempty(slope)
    X = [lfc,slope];
    Y = [lfc(dg,:),slope(dg,:)];
else 
    X = lfc;
    Y = lfc(dg,:);
end
res = Y - A*X;

if size(grplist,1)>1
    grplist = grplist';
end
ugrplist = unique(grplist);
muni = length(ugrplist);

fprintf('Z-scores are being calculated...\n')

pval = ones(length(dg),muni);
z = zeros(length(dg),muni);

for j = 1:length(dg)
    r = res(j,:);
    for gri = 1:muni
        si = find(grplist==gri);
        mr = length(r);
        [~,p,~,zval] = ztest(r(si),0,sqrt(sum(r(setdiff(1:mr,si)).^2,2)/(mr-1-length(si))),'Tail','right');
        pval(j,gri) = p;
        z(j,gri) = zval;
    end
end

%% Combine Z-scores
fprintf('Combining z-scores for proteins...\n')

% normalized A coefficients are used as weights
Aw  = A./repmat(max(abs(A),[],2),[1,n]);
 

proti = find(sum(pgn(1:n,1:n),2));
zp = [];

% weighted z-score mean
for j=1:length(proti)
   tgi = find(pgn(proti(j),dg)); 
   w = Aw(tgi,proti(j));
   zp = [zp;(sum(z(tgi,:).*repmat(w,[1,size(z,2)]),1))/sqrt(sum(w.^2))];
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Pscore = zeros(n,muni);
Pscore(proti,:) = zp;

A = sparse(A);
end